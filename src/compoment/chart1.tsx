// @ts-nocheck
import { createChart, ColorType } from 'lightweight-charts';
import React, { useEffect, useRef } from 'react';
import { useRequest } from 'ahooks';

export default function ChartComponent (props:any) {


  // btc:https://www.coingecko.com/ohlc/1/series/usd/24_hours.json
  // eth:https://www.coingecko.com/ohlc/1/series/usd/24_hours.json



  const btcMock = [
    [
        1670446800000,
        16839.14,
        16839.14,
        16839.14,
        16839.14
    ],
    [
        1670448600000,
        16833.47,
        16835.27,
        16824.59,
        16830.33
    ],
    [
        1670450400000,
        16824.41,
        16851.91,
        16818.09,
        16821.25
    ],
    [
        1670452200000,
        16816.55,
        16851.95,
        16816.55,
        16851.95
    ],
    [
        1670454000000,
        16837,
        16864.44,
        16837,
        16851.1
    ],
    [
        1670455800000,
        16859.92,
        16870.53,
        16859.92,
        16866.62
    ],
    [
        1670457600000,
        16864.04,
        16875.09,
        16851.3,
        16851.3
    ],
    [
        1670459400000,
        16849.19,
        16864.87,
        16841.57,
        16864.87
    ],
    [
        1670461200000,
        16856.36,
        16879.75,
        16856.36,
        16857.65
    ],
    [
        1670463000000,
        16861.69,
        16861.69,
        16831.47,
        16831.47
    ],
    [
        1670464800000,
        16848.9,
        16848.9,
        16816.88,
        16816.88
    ],
    [
        1670466600000,
        16847.57,
        16847.57,
        16817.13,
        16825.77
    ],
    [
        1670468400000,
        16830.67,
        16843.34,
        16830.67,
        16843.34
    ],
    [
        1670470200000,
        16840.71,
        16856.67,
        16840.71,
        16856.67
    ],
    [
        1670472000000,
        16874.18,
        16874.18,
        16839.53,
        16839.84
    ],
    [
        1670473800000,
        16840.89,
        16845.99,
        16827.77,
        16827.77
    ],
    [
        1670475600000,
        16814.41,
        16822.37,
        16814.41,
        16820.85
    ],
    [
        1670477400000,
        16817.74,
        16826.65,
        16814.71,
        16821.13
    ],
    [
        1670479200000,
        16817.27,
        16824.94,
        16816.99,
        16820.58
    ],
    [
        1670481000000,
        16827.08,
        16827.08,
        16799.07,
        16805.93
    ],
    [
        1670482800000,
        16802.25,
        16817.51,
        16802.25,
        16817.51
    ],
    [
        1670484600000,
        16809.55,
        16845.55,
        16809.55,
        16836.68
    ],
    [
        1670486400000,
        16818.92,
        16848.22,
        16818.92,
        16848.22
    ],
    [
        1670488200000,
        16828.72,
        16839.15,
        16828.23,
        16828.23
    ],
    [
        1670490000000,
        16831.99,
        16842.11,
        16831.44,
        16842.11
    ],
    [
        1670491800000,
        16855.89,
        16855.89,
        16827.07,
        16827.07
    ],
    [
        1670493600000,
        16829.26,
        16829.26,
        16816.63,
        16820.53
    ],
    [
        1670495400000,
        16818.73,
        16840.45,
        16806.84,
        16840.45
    ],
    [
        1670497200000,
        16836.26,
        16837.68,
        16817.06,
        16821.51
    ],
    [
        1670499000000,
        16821.24,
        16831.35,
        16821.24,
        16830.03
    ],
    [
        1670500800000,
        16829.23,
        16849.78,
        16816.1,
        16849.78
    ],
    [
        1670502600000,
        16871.34,
        16871.34,
        16845.42,
        16845.42
    ],
    [
        1670504400000,
        16846.89,
        16852.34,
        16837.86,
        16838.04
    ],
    [
        1670506200000,
        16838.61,
        16838.61,
        16822.19,
        16829.01
    ],
    [
        1670508000000,
        16839.64,
        16856.06,
        16830.04,
        16849.04
    ],
    [
        1670509800000,
        16851.31,
        16859.02,
        16846.57,
        16859.02
    ],
    [
        1670511600000,
        16855.21,
        16860.24,
        16852.46,
        16859.13
    ],
    [
        1670513400000,
        16883.43,
        16937.26,
        16883.43,
        16937.26
    ],
    [
        1670515200000,
        16922.35,
        16955.96,
        16922.35,
        16932.71
    ],
    [
        1670517000000,
        16932.82,
        16941.66,
        16918.29,
        16932.61
    ],
    [
        1670518800000,
        16941.87,
        16941.87,
        16927.4,
        16931.26
    ],
    [
        1670520600000,
        16952.53,
        16956.23,
        16945.39,
        16955.03
    ],
    [
        1670522400000,
        16957.03,
        16957.03,
        16941.92,
        16951.38
    ],
    [
        1670524200000,
        16974.11,
        17002.37,
        16968.42,
        17002.37
    ],
    [
        1670526000000,
        17078.62,
        17291.85,
        17078.62,
        17291.85
    ],
    [
        1670527800000,
        17253.4,
        17278.53,
        17221.75,
        17221.75
    ],
    [
        1670529600000,
        17222.03,
        17260.33,
        17222.03,
        17252.9
    ],
    [
        1670531400000,
        17244.26,
        17286.6,
        17228.75,
        17228.75
    ],
    [
        1670533200000,
        17223.64,
        17223.64,
        17211.96,
        17214.1
    ]
]

let btcMock1
btcMock1 = btcMock.map((itme)=>{
  let a ={}
  a['time'] = itme[0]
  a['open'] = itme[1]
  a['high'] = itme[2]
  a['low'] = itme[3]
  a['close'] = itme[4]
  return a
})

let ethMock = [
  [
    1670448600000,
    1232.29,
    1233.05,
    1231.94,
    1231.94
  ],
  [
    1670450400000,
    1233.6,
    1233.6,
    1230.41,
    1231.28
  ],
  [
    1670452200000,
    1232.51,
    1232.51,
    1229.38,
    1229.38
  ],
  [
    1670454000000,
    1230.07,
    1230.72,
    1227.53,
    1230.52
  ],
  [
    1670455800000,
    1232.21,
    1233.59,
    1231.5,
    1233.25
  ],
  [
    1670457600000,
    1233.09,
    1234.44,
    1233.09,
    1233.63
  ],
  [
    1670459400000,
    1232.83,
    1234.81,
    1232.31,
    1234.81
  ],
  [
    1670461200000,
    1233.68,
    1234.65,
    1231.29,
    1231.29
  ],
  [
    1670463000000,
    1230.17,
    1230.17,
    1227.18,
    1228.9
  ],
  [
    1670464800000,
    1227.03,
    1227.17,
    1226.31,
    1226.31
  ],
  [
    1670466600000,
    1228.16,
    1228.73,
    1227.48,
    1228.73
  ],
  [
    1670468400000,
    1230.34,
    1234.7,
    1230.34,
    1234.44
  ],
  [
    1670470200000,
    1233.35,
    1236.59,
    1233.35,
    1236.59
  ],
  [
    1670472000000,
    1234.94,
    1234.94,
    1233.19,
    1233.19
  ],
  [
    1670473800000,
    1232.77,
    1233.29,
    1229.76,
    1229.76
  ],
  [
    1670475600000,
    1228.31,
    1229.36,
    1228.3,
    1229.36
  ],
  [
    1670477400000,
    1228.94,
    1229.46,
    1228.33,
    1228.69
  ],
  [
    1670479200000,
    1228.66,
    1228.66,
    1228.22,
    1228.28
  ],
  [
    1670481000000,
    1229.42,
    1229.42,
    1227.1,
    1228.45
  ],
  [
    1670482800000,
    1228.44,
    1229.78,
    1228.44,
    1229.52
  ],
  [
    1670484600000,
    1229.13,
    1234.69,
    1229.13,
    1234.69
  ],
  [
    1670486400000,
    1233.24,
    1235.21,
    1233.24,
    1234.94
  ],
  [
    1670488200000,
    1233.34,
    1234.28,
    1232.96,
    1233.08
  ],
  [
    1670490000000,
    1232.97,
    1234.32,
    1232.97,
    1234.32
  ],
  [
    1670491800000,
    1235.03,
    1235.03,
    1232.55,
    1232.55
  ],
  [
    1670493600000,
    1232.35,
    1233.01,
    1231.59,
    1231.59
  ],
  [
    1670495400000,
    1231.5,
    1235.02,
    1230.73,
    1235.02
  ],
  [
    1670497200000,
    1234.29,
    1234.56,
    1233.49,
    1233.52
  ],
  [
    1670499000000,
    1233.51,
    1234.93,
    1233.31,
    1234.93
  ],
  [
    1670500800000,
    1235.32,
    1239.17,
    1233.05,
    1239.17
  ],
  [
    1670502600000,
    1240.76,
    1242.34,
    1240.21,
    1240.21
  ],
  [
    1670504400000,
    1239.43,
    1240.31,
    1239.34,
    1240.03
  ],
  [
    1670506200000,
    1238.74,
    1239.03,
    1238.01,
    1239.03
  ],
  [
    1670508000000,
    1240.27,
    1242.04,
    1238.97,
    1242.04
  ],
  [
    1670509800000,
    1243.62,
    1244.92,
    1243.38,
    1244.52
  ],
  [
    1670511600000,
    1243.72,
    1244.67,
    1243.44,
    1244.67
  ],
  [
    1670513400000,
    1246.62,
    1251.25,
    1246.62,
    1251.25
  ],
  [
    1670515200000,
    1249.44,
    1253.37,
    1249.44,
    1250.97
  ],
  [
    1670517000000,
    1251.06,
    1252.19,
    1250.04,
    1251.19
  ],
  [
    1670518800000,
    1252.22,
    1252.22,
    1250.4,
    1250.4
  ],
  [
    1670520600000,
    1251.01,
    1251.71,
    1250.68,
    1251.05
  ],
  [
    1670522400000,
    1250.63,
    1253.62,
    1250.32,
    1253.62
  ],
  [
    1670524200000,
    1255.02,
    1255.02,
    1253.14,
    1255.01
  ],
  [
    1670526000000,
    1259.71,
    1289.24,
    1259.71,
    1289.24
  ],
  [
    1670527800000,
    1286.34,
    1288.6,
    1281.2,
    1281.2
  ],
  [
    1670529600000,
    1282.19,
    1285.2,
    1282.19,
    1283.82
  ],
  [
    1670531400000,
    1284.07,
    1285.49,
    1283.07,
    1284.11
  ],
  [
    1670533200000,
    1281.74,
    1281.74,
    1275.63,
    1275.63
  ],
  [
    1670535000000,
    1278.12,
    1278.12,
    1277.29,
    1277.29
  ]
]

let ethMock1 = ethMock.map((itme)=>{
  let a ={}
  a['time'] = itme[0]
  a['open'] = itme[1]
  a['high'] = itme[2]
  a['low'] = itme[3]
  a['close'] = itme[4]
  return a
})



 

  const getcoinPrice = () => {
    return fetch(`https://www.coingecko.com/ohlc/1/series/usd/24_hours.json`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      mode: 'no-cors'
    })
  }

  const { run: getPrice, data: getPriceRes, error: getPriceError } = useRequest(getcoinPrice, {
    manual: true,
    pollingWhenHidden: false
  })
  useEffect(() => {
    // approveHCT()
        getPrice()
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []) 

  useEffect(() => {
      if (getPriceRes) {
          // @ts-ignore
          console.log('价格数据', getPriceRes)
      }
      }, [getPriceRes])



	const	backgroundColor = '#ffffffbf'
	const 	lineColor = '#2962FF'
	const 	textColor = 'rgb(113 119 144 / 78%)'
	const 	areaTopColor = '#2962FF'
	const 	areaBottomColor = 'rgba(41, 98, 255, 0.28)'

	const chartContainerRef = useRef();
  

	useEffect(
		() => {
			const handleResize = () => {
				chart.applyOptions({ width: chartContainerRef.current.clientWidth });
			};

			const chart = createChart(chartContainerRef.current, {
				layout: {
					background: { type: ColorType.Solid, color: backgroundColor },
					textColor,
				},
				width: chartContainerRef.current.clientWidth,
				height: 300,
			});
			chart.timeScale().fitContent();

			const newSeries = chart.addCandlestickSeries({ lineColor, topColor: areaTopColor, bottomColor: areaBottomColor });
			newSeries.setData(btcMock1);

			window.addEventListener('resize', handleResize);

			return () => {
				window.removeEventListener('resize', handleResize);

				chart.remove();
			};
		},
		[btcMock1, backgroundColor, lineColor, textColor, areaTopColor, areaBottomColor]
	);


  // 判断期权是btc 还是以太坊确定用哪个mock
	return (
		<div
			ref={chartContainerRef}
		/>
	);
};


